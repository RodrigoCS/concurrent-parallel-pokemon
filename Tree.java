import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.BorderLayout;

import javax.swing.JLabel;
import java.util.function.Consumer;

import javafx.scene.control.Alert;

class Tree extends Sprite {
    final int WIDTH = 32;
    final int HEIGHT = 48;
    int x, y;
    private BufferedImage dbg = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);; 

    Color[] colors = {
        Color.decode("#70c8a0"),
        Color.decode("#b0f47c"),
        Color.decode("#74c854"),
        Color.decode("#2c8424"),
        Color.decode("#2c4c08"),
        Color.decode("#645454"),
        Color.decode("#342c24"),
        Color.decode("#10945c")
    };

    int[][] map = new int[][]{
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 1, 1, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 2, 4, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 4, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 3, 1, 2, 4, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 3, 3, 3, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 3, 3, 3, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 4, 2, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 3, 1, 2, 2, 4, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 4, 1, 1, 3, 2, 3, 1, 1, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 3, 2, 3, 1, 1, 4, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 3, 2, 1, 1, 3, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 3, 2, 2, 1, 2, 3, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 4, 1, 1, 1, 2, 2, 3, 3, 3, 2, 1, 1, 1, 1, 1, 2, 3, 3, 2, 2, 1, 1, 1, 4, 0, 0, 0, 0 }, 
        { 0, 0, 4, 4, 4, 1, 1, 2, 3, 2, 1, 1, 2, 3, 1, 2, 2, 1, 3, 3, 2, 2, 2, 3, 2, 1, 1, 4, 4, 4, 0, 0 }, 
        { 0, 0, 4, 2, 2, 4, 2, 4, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 2, 1, 2, 1, 4, 2, 4, 2, 2, 4, 0, 0 }, 
        { 0, 0, 0, 3, 2, 4, 3, 1, 1, 1, 1, 1, 2, 1, 3, 2, 2, 3, 2, 2, 1, 2, 1, 2, 1, 3, 4, 2, 3, 0, 0, 0 }, 
        { 0, 0, 4, 2, 3, 3, 4, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 4, 3, 3, 2, 4, 0, 0 }, 
        { 0, 0, 3, 3, 3, 2, 3, 3, 1, 1, 3, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 3, 1, 1, 3, 3, 2, 3, 3, 3, 0, 0 }, 
        { 0, 0, 4, 3, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 2, 3, 4, 0, 0 }, 
        { 0, 4, 4, 2, 2, 2, 3, 2, 2, 2, 3, 3, 1, 3, 1, 1, 1, 1, 3, 1, 3, 3, 2, 2, 2, 3, 2, 2, 2, 4, 4, 0 }, 
        { 0, 3, 2, 3, 2, 3, 2, 2, 2, 2, 3, 3, 4, 2, 1, 2, 2, 1, 2, 4, 3, 3, 2, 2, 2, 2, 3, 2, 3, 2, 3, 0 }, 
        { 0, 4, 3, 4, 3, 3, 2, 2, 3, 2, 2, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 2, 2, 3, 2, 2, 3, 3, 4, 3, 4, 0 }, 
        { 0, 4, 3, 4, 4, 3, 2, 3, 2, 2, 2, 2, 3, 2, 3, 3, 3, 3, 2, 3, 2, 2, 2, 2, 3, 2, 3, 4, 4, 3, 4, 0 }, 
        { 0, 0, 4, 2, 3, 4, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 4, 3, 2, 4, 0, 0 }, 
        { 0, 4, 2, 3, 3, 4, 4, 4, 4, 2, 3, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 3, 2, 4, 4, 4, 4, 3, 3, 2, 4, 0 }, 
        { 0, 4, 3, 3, 3, 3, 3, 3, 4, 4, 3, 2, 2, 3, 2, 3, 3, 2, 3, 2, 2, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 0 }, 
        { 0, 0, 3, 3, 4, 3, 3, 3, 4, 4, 4, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 4, 4, 4, 3, 3, 3, 4, 3, 3, 4, 0 }, 
        { 0, 0, 4, 4, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 3, 3, 3, 4, 3, 3, 4, 4, 0, 0 }, 
        { 0, 0, 0, 4, 3, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 0, 0, 0 }, 
        { 0, 0, 0, 4, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 4, 4, 0, 0, 0 }, 
        { 0, 0, 0, 7, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 7, 0, 0, 0 }, 
        { 0, 0, 7, 3, 3, 3, 4, 4, 3, 4, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 3, 3, 4, 3, 4, 4, 3, 3, 3, 7, 0, 0 }, 
        { 0, 7, 3, 3, 3, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 3, 3, 7, 0 }, 
        { 7, 7, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 3, 3, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 7, 0 }, 
        { 7, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 6, 5, 5, 4, 4, 5, 5, 6, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 7, 0 }, 
        { 7, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 6, 5, 5, 5, 5, 5, 5, 6, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 7, 0 }, 
        { 0, 7, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 6, 5, 5, 5, 5, 6, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 7, 0 }, 
        { 0, 0, 7, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 7, 0, 0 }, 
        { 0, 0, 0, 7, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 7, 0, 0, 0 }, 
        { 0, 0, 0, 0, 7, 7, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 7, 7, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 0, 0, 0, 0, 0, 0 }, 
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 } 
};


      

    Tree(int x, int y) {
        this.x = x;
        this.y = y;
    }

    void paint(GameCanvas gameCanvas) {
        for (int i = 0; i < HEIGHT; i++) {
            for (int j = 0; j < WIDTH; j++) {
                int tileValue = this.map[i][j];
                if (tileValue != 0) {
                    dbg.setRGB(j, i, this.colors[tileValue].getRGB());
                    // gameCanvas.putPixel2(this.x + j, this.y + i, this.colors[tileValue]);
                }
            }
        }
        gameCanvas.renderSprite(dbg, this.x, this.y);
        // gameCanvas.getGraphics().drawImage(dbg, this.x, this.y, gameCanvas);
    }
}

//
